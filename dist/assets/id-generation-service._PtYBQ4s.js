import{h as s}from"./index.CLAiwwTT.js";import{d as c,j as u,m,s as l,u as g,e as d,q as h,g as E,h as p}from"./firebase-vendor.D8xw0AXf.js";import"./query-vendor.DpsghfSz.js";import"./react-vendor.CfKEcsXX.js";import"./ui-vendor.EZF4ucWh.js";import"./utils-vendor.B0NEtgzl.js";class _{static EMPLOYEE_ID_CONFIG_KEY="employee_id_config";static async generateEmployeeId(){try{const e=c(s,"system_config",this.EMPLOYEE_ID_CONFIG_KEY),t=await u(e);let r;t.exists()?r=t.data():(r={prefix:"TSA-EMP",length:4,currentCounter:await this.findHighestExistingId(),lastGenerated:"",updatedAt:new Date},await m(e,{...r,updatedAt:l()}));let n=0,o,a=!1;do{n++;const i=r.currentCounter+n,f=String(i).padStart(r.length,"0");if(o=`${r.prefix}-${f}`,a=await this.isEmployeeIdUnique(o),n>1e3)throw new Error("Unable to generate unique employee ID after 1000 attempts")}while(!a);return await g(e,{currentCounter:r.currentCounter+n,lastGenerated:o,updatedAt:l()}),o}catch(e){throw console.error("Failed to generate employee ID:",e),new Error("Failed to generate unique employee ID")}}static async isEmployeeIdUnique(e){try{const t=d(s,"operators"),r=h(t,E("employeeId","==",e));return(await p(r)).empty}catch(t){return console.error("Failed to check employee ID uniqueness:",t),!1}}static async getIDConfig(){try{const e=c(s,"system_config",this.EMPLOYEE_ID_CONFIG_KEY),t=await u(e);return t.exists()?t.data():null}catch(e){return console.error("Failed to get ID configuration:",e),null}}static async updateIDConfig(e){try{const t=c(s,"system_config",this.EMPLOYEE_ID_CONFIG_KEY);await g(t,{...e,updatedAt:l()})}catch(t){throw console.error("Failed to update ID configuration:",t),new Error("Failed to update ID configuration")}}static async previewNextEmployeeId(){try{const e=await this.getIDConfig();if(!e)return"TSA-EMP-0001";const t=e.currentCounter+1,r=String(t).padStart(e.length,"0");return`${e.prefix}-${r}`}catch(e){return console.error("Failed to preview next employee ID:",e),"TSA-EMP-0001"}}static validateEmployeeIdFormat(e){return/^TSA-EMP-\d{4}$/.test(e)?{valid:!0}:{valid:!1,message:"Employee ID must follow format: TSA-EMP-XXXX (e.g., TSA-EMP-0001)"}}static async findHighestExistingId(){try{const e=d(s,"operators"),t=await p(e);let r=0;return t.forEach(n=>{const o=n.data();if(o.employeeId){const a=o.employeeId.match(/TSA-EMP-(\d+)/);if(a){const i=parseInt(a[1],10);i>r&&(r=i)}}}),r}catch(e){return console.error("Failed to find highest existing ID:",e),0}}static async generateUniqueEmployeeIdSuggestion(){try{let e=0,t,r=!1;const o=(await this.getIDConfig())?.currentCounter||await this.findHighestExistingId();do{e++;const a=o+e;if(t=`TSA-EMP-${String(a).padStart(4,"0")}`,r=await this.isEmployeeIdUnique(t),e>1e3)throw new Error("Unable to generate unique suggestion after 1000 attempts")}while(!r);return t}catch(e){return console.error("Failed to generate unique suggestion:",e),`TSA-EMP-${Date.now().toString().slice(-4)}`}}static async getIDStatistics(){try{const e=await this.getIDConfig(),t=await this.generateUniqueEmployeeIdSuggestion();return{totalGenerated:e?.currentCounter||0,lastGenerated:e?.lastGenerated||"None",nextPreview:t}}catch(e){return console.error("Failed to get ID statistics:",e),{totalGenerated:0,lastGenerated:"None",nextPreview:"TSA-EMP-0001"}}}}export{_ as IDGenerationService,_ as default};
