import{B as l}from"./base-service.9pve6B0A.js";import{O as R}from"./operator-wallet-service.CYKz_Xt9.js";import{k as g,T as m,d as h,s as c}from"./firebase-vendor.BZUNkHzc.js";import{C as u,d as E}from"./firebase.BVb4kvNg.js";const i={REPORTED:"reported",ACKNOWLEDGED:"acknowledged",REWORK_IN_PROGRESS:"rework_in_progress",REWORK_COMPLETED:"rework_completed",RETURNED_TO_OPERATOR:"returned_to_operator",FINAL_COMPLETION:"final_completion",PAYMENT_RELEASED:"payment_released"},y={urgent:1,high:4,normal:8,low:24};class f extends l{walletService;constructor(){super(u.DAMAGE_REPORTS),this.walletService=new R}async submitDamageReport(r){try{const e=this.validateDamageReport(r);if(!e.isValid)return{success:!1,error:e.errors.join(", "),code:"VALIDATION_ERROR"};const t=g(E),a=await new l(u.WORK_ITEMS).getById(r.bundleId);if(!a.success||!a.data)return{success:!1,error:"Bundle not found",code:"BUNDLE_NOT_FOUND"};const o=a.data,n=o.pieces*o.rate;await this.walletService.holdBundlePayment(r.bundleId,r.operatorId,{reason:"DAMAGE_REPORTED",heldAmount:n,heldPieces:r.pieceCount});const d={...r,reportId:`DR_${Date.now()}`,status:i.REPORTED,reportedAt:m.now(),paymentImpact:{operatorAtFault:this.determineOperatorFault(r.damageType),paymentAdjustment:0,adjustmentReason:"Pending investigation",supervisorCompensation:0}},p=h(E,u.DAMAGE_REPORTS);return t.set(p,d),await t.commit(),await Promise.all([this.notifySupervisor(d),this.notifyOperatorPaymentHeld(d,n)]),{success:!0,data:{...d,reportId:p.id},message:"Damage report submitted successfully. Bundle payment has been held pending resolution."}}catch(e){return console.error("Error submitting damage report:",e),{success:!1,error:e instanceof Error?e.message:"Failed to submit damage report",code:"DAMAGE_REPORT_FAILED"}}}async getSupervisorDamageQueue(r,e){try{const t={field:"supervisorId",operator:"==",value:r},s=await this.getWhere(t,{orderByField:"reportedAt",orderDirection:"desc"});if(!s.success)return s;let a=s.data||[];return e&&e.length>0&&(a=a.filter(o=>e.includes(o.status))),a.forEach(o=>this.checkEscalation(o)),{success:!0,data:a}}catch(t){return console.error("Error getting supervisor queue:",t),{success:!1,error:t instanceof Error?t.message:"Failed to get supervisor queue",code:"SUPERVISOR_QUEUE_FAILED"}}}async startRework(r,e){try{const t={status:i.REWORK_IN_PROGRESS,reworkStartedAt:c(),reworkDetails:{supervisorNotes:e.notes,estimatedTimeMinutes:e.estimatedTime,startedBy:e.supervisorId,partsReplaced:[],timeSpentMinutes:0,qualityCheckPassed:!1,costEstimate:0}},s=await this.update(r,t);return s.success&&await this.createDamageNotification({recipientId:s.data?.operatorId,type:"REWORK_STARTED",title:"Rework Started",message:`Supervisor has started rework on your damaged pieces. Estimated time: ${e.estimatedTime} minutes`,priority:"normal",data:{reportId:r,supervisorNotes:e.notes}}),s}catch(t){return console.error("Error starting rework:",t),{success:!1,error:t instanceof Error?t.message:"Failed to start rework",code:"REWORK_START_FAILED"}}}async completeRework(r,e){try{const t={status:i.REWORK_COMPLETED,reworkCompletedAt:c(),"reworkDetails.timeSpentMinutes":e.timeSpent,"reworkDetails.partsReplaced":e.partsReplaced,"reworkDetails.qualityCheckPassed":e.qualityScore>=90,"reworkDetails.costEstimate":e.costEstimate,"reworkDetails.completionNotes":e.notes,"paymentImpact.supervisorCompensation":this.calculateSupervisorCompensation(e.timeSpent)},s=await this.update(r,t);return s.success&&await this.createDamageNotification({recipientId:s.data?.operatorId,type:"REWORK_COMPLETED",title:"Rework Completed",message:"Rework has been completed. Please collect your pieces and complete the remaining work.",priority:"high",data:{reportId:r,qualityScore:e.qualityScore}}),s}catch(t){return console.error("Error completing rework:",t),{success:!1,error:t instanceof Error?t.message:"Failed to complete rework",code:"REWORK_COMPLETION_FAILED"}}}async returnToOperator(r,e){try{const t={status:i.RETURNED_TO_OPERATOR,returnedAt:c(),returnedBy:e.supervisorId,returnNotes:e.returnNotes},s=await this.update(r,t);return s.success&&await this.createDamageNotification({recipientId:s.data?.operatorId,type:"PIECES_RETURNED",title:"Pieces Returned",message:"Your reworked pieces are ready for collection. Please complete the remaining work.",priority:"high",data:{reportId:r,returnNotes:e.returnNotes}}),s}catch(t){return console.error("Error returning to operator:",t),{success:!1,error:t instanceof Error?t.message:"Failed to return to operator",code:"RETURN_FAILED"}}}async markFinalCompletion(r,e,t){try{const s=await this.getById(r);if(!s.success||!s.data)return{success:!1,error:"Damage report not found",code:"REPORT_NOT_FOUND"};const a=s.data,o={status:i.FINAL_COMPLETION,finalCompletedAt:c(),completedBy:e,completionData:t||{}},n=await this.update(r,o);return n.success&&(await this.walletService.releaseBundlePayment(a.bundleId,e,{supervisorId:a.supervisorId,notes:"Damage resolved and work completed"}),await this.update(r,{status:i.PAYMENT_RELEASED,paymentReleasedAt:c()}),await this.createDamageNotification({recipientId:e,type:"PAYMENT_RELEASED",title:"Payment Released",message:"Your bundle payment has been released. Earnings are now available for withdrawal.",priority:"high",data:{reportId:r,bundleId:a.bundleId}})),n}catch(s){return console.error("Error marking final completion:",s),{success:!1,error:s instanceof Error?s.message:"Failed to mark final completion",code:"FINAL_COMPLETION_FAILED"}}}async createDamageNotification(r){try{const e=new l(u.DAMAGE_NOTIFICATIONS),t={...r,read:!1,createdAt:m.now(),expiresAt:new Date(Date.now()+10080*60*1e3)};return await e.create(t)}catch(e){return console.error("Error creating notification:",e),{success:!1,error:e instanceof Error?e.message:"Failed to create notification",code:"NOTIFICATION_FAILED"}}}async getReworkRequests(r){try{const e={field:"supervisorId",operator:"==",value:r},t=await this.getWhere(e,{orderByField:"reportedAt",orderDirection:"desc"});return t.success?{success:!0,data:t.data?.filter(a=>a.status===i.REPORTED)||[]}:t}catch(e){return console.error("Error getting rework requests:",e),{success:!1,error:e instanceof Error?e.message:"Failed to get rework requests",code:"REWORK_REQUESTS_FAILED"}}}subscribeSupervisorQueue(r,e){const t={field:"supervisorId",operator:"==",value:r};return this.subscribeToCollection(e,t,{orderByField:"reportedAt",orderDirection:"desc"})}validateDamageReport(r){const e=[];return r.bundleId||e.push("Bundle ID is required"),r.operatorId||e.push("Operator ID is required"),r.supervisorId||e.push("Supervisor ID is required"),r.damageType||e.push("Damage type is required"),(!r.pieceCount||r.pieceCount<=0)&&e.push("Valid piece count is required"),r.severity||e.push("Severity is required"),r.urgency||e.push("Urgency is required"),{isValid:e.length===0,errors:e}}determineOperatorFault(r){return["stitching_defect","needle_damage","tension_issue","alignment_error","broken_stitch","wrong_measurement","missing_operation"].includes(r)}calculateSupervisorCompensation(r){const t=r/60;return Math.round(t*150)}checkEscalation(r){const e=(Date.now()-r.reportedAt.toMillis())/36e5,t=y[r.urgency];e>t&&this.escalateToAdmin(r,`Overdue by ${e-t} hours`)}async escalateToAdmin(r,e){console.log(`Escalating damage report ${r.reportId} to admin: ${e}`),await this.createDamageNotification({recipientId:"admin",type:"ESCALATED_DAMAGE",title:"Damage Report Escalated",message:`Damage report ${r.reportId} has been escalated due to delayed response: ${e}`,priority:"urgent",data:{reportId:r.reportId,reason:e,originalReport:r}})}async notifySupervisor(r){await this.createDamageNotification({recipientId:r.supervisorId,type:"DAMAGE_REPORTED",title:"New Damage Report",message:`${r.operatorName} reported ${r.severity} damage on bundle ${r.bundleNumber}`,priority:r.urgency,data:{reportId:r.reportId,bundleId:r.bundleId}})}async notifyOperatorPaymentHeld(r,e){await this.createDamageNotification({recipientId:r.operatorId,type:"PAYMENT_HELD",title:"Payment Held",message:`Your bundle payment of Rs ${e} has been held pending damage resolution`,priority:"high",data:{reportId:r.reportId,heldAmount:e,bundleId:r.bundleId}})}}const T=new f;export{T as d};
