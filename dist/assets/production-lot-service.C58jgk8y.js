import{h as l}from"./index.CLAiwwTT.js";import{s as k,c as b,e as h,d as N,o as q,q as g,f as M,g as u,h as T,j as v,u as D}from"./firebase-vendor.D8xw0AXf.js";const E={polo:{name:"Polo T-Shirt",nameNepali:"पोलो टी-शर्ट",steps:[{operation:"Collar Making",operationNepali:"कलर बनाउने",machineType:"single_needle",pricePerPiece:2.5,estimatedMinutes:3,requiredSkill:"intermediate"},{operation:"Placket Making",operationNepali:"प्लेकेट बनाउने",machineType:"single_needle",pricePerPiece:2,estimatedMinutes:2.5,requiredSkill:"intermediate"},{operation:"Shoulder Join",operationNepali:"काँध जोड्ने",machineType:"overlock",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Sleeve Attach",operationNepali:"बाही जोड्ने",machineType:"overlock",pricePerPiece:3,estimatedMinutes:4,requiredSkill:"intermediate"},{operation:"Top Stitch",operationNepali:"माथिल्लो सिलाई",machineType:"flatlock",pricePerPiece:1,estimatedMinutes:1.5,requiredSkill:"basic"},{operation:"Side Seam",operationNepali:"छेउको सिलाई",machineType:"overlock",pricePerPiece:2,estimatedMinutes:3,requiredSkill:"basic"},{operation:"Slit Making",operationNepali:"स्लिट बनाउने",machineType:"single_needle",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Bottom Hem",operationNepali:"तलको हेम",machineType:"flatlock",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Finishing",operationNepali:"फिनिशिङ",machineType:"finishing",pricePerPiece:1,estimatedMinutes:1,requiredSkill:"basic"}]},tshirt:{name:"T-Shirt",nameNepali:"टी-शर्ट",steps:[{operation:"Shoulder Join",operationNepali:"काँध जोड्ने",machineType:"overlock",pricePerPiece:1,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Sleeve Attach",operationNepali:"बाही जोड्ने",machineType:"overlock",pricePerPiece:2,estimatedMinutes:3,requiredSkill:"basic"},{operation:"Side Seam",operationNepali:"छेउको सिलाई",machineType:"overlock",pricePerPiece:1.5,estimatedMinutes:2.5,requiredSkill:"basic"},{operation:"Bottom Hem",operationNepali:"तलको हेम",machineType:"flatlock",pricePerPiece:1,estimatedMinutes:1.5,requiredSkill:"basic"},{operation:"Finishing",operationNepali:"फिनिशिङ",machineType:"finishing",pricePerPiece:.5,estimatedMinutes:1,requiredSkill:"basic"}]}};class A{async createProductionLot(r){try{const o=(E[r.garmentType]||E.tshirt).steps.map((a,n)=>({id:`step_${n+1}`,stepNumber:n+1,operation:a.operation,operationNepali:a.operationNepali,machineType:a.machineType,pricePerPiece:a.pricePerPiece,estimatedMinutes:a.estimatedMinutes,requiredSkill:a.requiredSkill,status:"pending",assignedOperators:[],completedPieces:0,dependencies:n>0?[`step_${n}`]:[]})),t={...r,processSteps:o,currentStep:1,status:"in_progress",createdAt:k()};return{id:(await b(h(l,"productionLots"),t)).id,...t,createdAt:new Date}}catch(e){throw console.error("Error creating production lot:",e),e}}subscribeToProductionLot(r,e){const o=N(l,"productionLots",r);return q(o,t=>{t.exists()?e({id:t.id,...t.data()}):e(null)})}async getProductionLots(r){try{let e=g(h(l,"productionLots"),M("createdAt","desc"));return r?.status&&(e=g(e,u("status","==",r.status))),r?.garmentType&&(e=g(e,u("garmentType","==",r.garmentType))),r?.createdBy&&(e=g(e,u("createdBy","==",r.createdBy))),(await T(e)).docs.map(t=>({id:t.id,...t.data()}))}catch(e){throw console.error("Error getting production lots:",e),e}}async assignOperatorToStep(r,e,o){try{const t=N(l,"productionLots",r),i=await v(t);if(!i.exists())throw new Error("Production lot not found");const n=i.data().processSteps.map(s=>s.id===e?{...s,assignedOperators:[...s.assignedOperators||[],o],status:"in_progress",startedAt:k()}:s);await D(t,{processSteps:n})}catch(t){throw console.error("Error assigning operator to step:",t),t}}async createOperatorWorkEntry(r){try{const e=r.completedPieces*r.pricePerPiece,o={...r,totalPrice:e,createdAt:k()},t=await b(h(l,"operatorWorkEntries"),o);return await this.updateStepProgress(r.lotNumber,r.stepId,r.completedPieces),{id:t.id,...o,createdAt:new Date}}catch(e){throw console.error("Error creating operator work entry:",e),e}}async updateStepProgress(r,e,o){try{const t=g(h(l,"productionLots"),u("lotNumber","==",r)),i=await T(t);if(i.empty)throw new Error("Production lot not found");const a=i.docs[0],n=a.data(),s=n.processSteps.map(c=>{if(c.id===e){const m=c.completedPieces+o,y=m>=n.totalPieces;return{...c,completedPieces:m,status:y?"completed":"in_progress",completedAt:y?k():c.completedAt}}return c}),w=s.find(c=>c.id===e)?.status==="completed",d=s.find(c=>c.stepNumber===n.currentStep+1),p={processSteps:s};w&&d&&(p.currentStep=n.currentStep+1,(d.dependencies.length===0||d.dependencies.every(c=>s.find(m=>m.id===c)?.status==="completed"))&&(s[d.stepNumber-1].status="pending")),s.every(c=>c.status==="completed")&&(p.status="completed",p.completedAt=k()),await D(N(l,"productionLots",a.id),p)}catch(t){throw console.error("Error updating step progress:",t),t}}async getOperatorWorkEntries(r,e,o){try{const t=new Date(o,parseInt(e)-1,1),i=new Date(o,parseInt(e),0,23,59,59),a=g(h(l,"operatorWorkEntries"),u("operatorId","==",r),u("workDate",">=",t),u("workDate","<=",i),M("workDate","desc"));return(await T(a)).docs.map(s=>({id:s.id,...s.data()}))}catch(t){throw console.error("Error getting operator work entries:",t),t}}async calculateMonthlyWages(r,e){try{const o=new Date(e,parseInt(r)-1,1),t=new Date(e,parseInt(r),0,23,59,59),i=g(h(l,"operatorWorkEntries"),u("workDate",">=",o),u("workDate","<=",t)),s=(await T(i)).docs.map(d=>({id:d.id,...d.data()})).reduce((d,p)=>(d[p.operatorId]||(d[p.operatorId]=[]),d[p.operatorId].push(p),d),{}),w=[];for(const[d,p]of Object.entries(s)){const f=p.reduce((S,P)=>S+P.completedPieces,0),c=p.reduce((S,P)=>S+P.totalPrice,0),m=p.reduce((S,P)=>P.startTime&&P.endTime?S+(P.endTime.toDate().getTime()-P.startTime.toDate().getTime())/(1e3*60*60):S,0),y=p[0]?.operatorName||"Unknown",L=m>0?f/m:0;w.push({operatorId:d,operatorName:y,month:r,year:e,workEntries:p,totalPieces:f,totalEarnings:c,totalHours:m,efficiency:L,bonuses:0,deductions:0,finalWage:c})}return w}catch(o){throw console.error("Error calculating monthly wages:",o),o}}subscribeToProductionStats(r){return q(h(l,"productionLots"),e=>{const o=e.docs.map(i=>({id:i.id,...i.data()})),t={totalLots:o.length,activeLots:o.filter(i=>i.status==="in_progress").length,completedLots:o.filter(i=>i.status==="completed").length,totalPieces:o.reduce((i,a)=>i+a.totalPieces,0),completedPieces:o.reduce((i,a)=>i+a.processSteps.reduce((n,s)=>n+s.completedPieces,0),0)};r(t)})}getProcessTemplates(){return E}}const O=new A;export{O as p};
