import{h as l}from"./index.CUWf0ERd.js";import{s as y,c as E,e as h,d as N,o as q,q as g,f as M,g as u,h as T,j as A,u as L}from"./firebase-vendor.D8xw0AXf.js";const b={polo:{name:"Polo T-Shirt",nameNepali:"पोलो टी-शर्ट",steps:[{operation:"Collar Making",operationNepali:"कलर बनाउने",machineType:"single_needle",pricePerPiece:2.5,estimatedMinutes:3,requiredSkill:"intermediate"},{operation:"Placket Making",operationNepali:"प्लेकेट बनाउने",machineType:"single_needle",pricePerPiece:2,estimatedMinutes:2.5,requiredSkill:"intermediate"},{operation:"Shoulder Join",operationNepali:"काँध जोड्ने",machineType:"overlock",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Sleeve Attach",operationNepali:"बाही जोड्ने",machineType:"overlock",pricePerPiece:3,estimatedMinutes:4,requiredSkill:"intermediate"},{operation:"Top Stitch",operationNepali:"माथिल्लो सिलाई",machineType:"flatlock",pricePerPiece:1,estimatedMinutes:1.5,requiredSkill:"basic"},{operation:"Side Seam",operationNepali:"छेउको सिलाई",machineType:"overlock",pricePerPiece:2,estimatedMinutes:3,requiredSkill:"basic"},{operation:"Slit Making",operationNepali:"स्लिट बनाउने",machineType:"single_needle",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Bottom Hem",operationNepali:"तलको हेम",machineType:"flatlock",pricePerPiece:1.5,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Finishing",operationNepali:"फिनिशिङ",machineType:"finishing",pricePerPiece:1,estimatedMinutes:1,requiredSkill:"basic"}]},tshirt:{name:"T-Shirt",nameNepali:"टी-शर्ट",steps:[{operation:"Shoulder Join",operationNepali:"काँध जोड्ने",machineType:"overlock",pricePerPiece:1,estimatedMinutes:2,requiredSkill:"basic"},{operation:"Sleeve Attach",operationNepali:"बाही जोड्ने",machineType:"overlock",pricePerPiece:2,estimatedMinutes:3,requiredSkill:"basic"},{operation:"Side Seam",operationNepali:"छेउको सिलाई",machineType:"overlock",pricePerPiece:1.5,estimatedMinutes:2.5,requiredSkill:"basic"},{operation:"Bottom Hem",operationNepali:"तलको हेम",machineType:"flatlock",pricePerPiece:1,estimatedMinutes:1.5,requiredSkill:"basic"},{operation:"Finishing",operationNepali:"फिनिशिङ",machineType:"finishing",pricePerPiece:.5,estimatedMinutes:1,requiredSkill:"basic"}]}};class D{async createProductionLot(e){try{const t={lotNumber:e.lotNumber||`LOT${Date.now()}`,articleNumber:e.articleNumber||"",articleName:e.articleName||"",garmentType:e.garmentType||"tshirt",totalPieces:e.totalPieces||0,colorSizeBreakdown:e.colorSizeBreakdown||[],currentStep:e.currentStep||1,status:e.status||"in_progress",createdBy:e.createdBy||"management",notes:e.notes||""},r=(b[t.garmentType]||b.tshirt).steps.map((a,i)=>({id:`step_${i+1}`,stepNumber:i+1,operation:a.operation,operationNepali:a.operationNepali,machineType:a.machineType,pricePerPiece:a.pricePerPiece,estimatedMinutes:a.estimatedMinutes,requiredSkill:a.requiredSkill,status:"pending",assignedOperators:[],completedPieces:0,dependencies:i>0?[`step_${i}`]:[]})),s={...t,processSteps:r,currentStep:1,status:"in_progress",createdAt:y()};return{id:(await E(h(l,"productionLots"),s)).id,...s,createdAt:new Date}}catch(t){throw console.error("Error creating production lot:",t),t}}subscribeToProductionLot(e,t){const o=N(l,"productionLots",e);return q(o,r=>{r.exists()?t({id:r.id,...r.data()}):t(null)})}async getProductionLots(e){try{let t=g(h(l,"productionLots"),M("createdAt","desc"));return e?.status&&(t=g(t,u("status","==",e.status))),e?.garmentType&&(t=g(t,u("garmentType","==",e.garmentType))),e?.createdBy&&(t=g(t,u("createdBy","==",e.createdBy))),(await T(t)).docs.map(r=>({id:r.id,...r.data()}))}catch(t){throw console.error("Error getting production lots:",t),t}}async assignOperatorToStep(e,t,o){try{const r=N(l,"productionLots",e),s=await A(r);if(!s.exists())throw new Error("Production lot not found");const a=s.data().processSteps.map(i=>i.id===t?{...i,assignedOperators:[...i.assignedOperators||[],o],status:"in_progress",startedAt:y()}:i);await L(r,{processSteps:a})}catch(r){throw console.error("Error assigning operator to step:",r),r}}async createOperatorWorkEntry(e){try{const t=e.completedPieces*e.pricePerPiece,o={...e,totalPrice:t,createdAt:y()},r=await E(h(l,"operatorWorkEntries"),o);return await this.updateStepProgress(e.lotNumber,e.stepId,e.completedPieces),{id:r.id,...o,createdAt:new Date}}catch(t){throw console.error("Error creating operator work entry:",t),t}}async updateStepProgress(e,t,o){try{const r=g(h(l,"productionLots"),u("lotNumber","==",e)),s=await T(r);if(s.empty)throw new Error("Production lot not found");const d=s.docs[0],a=d.data(),i=a.processSteps.map(n=>{if(n.id===t){const m=n.completedPieces+o,k=m>=a.totalPieces;return{...n,completedPieces:m,status:k?"completed":"in_progress",completedAt:k?y():n.completedAt}}return n}),w=i.find(n=>n.id===t)?.status==="completed",p=i.find(n=>n.stepNumber===a.currentStep+1),c={processSteps:i};w&&p&&(c.currentStep=a.currentStep+1,(p.dependencies.length===0||p.dependencies.every(n=>i.find(m=>m.id===n)?.status==="completed"))&&(i[p.stepNumber-1].status="pending")),i.every(n=>n.status==="completed")&&(c.status="completed",c.completedAt=y()),await L(N(l,"productionLots",d.id),c)}catch(r){throw console.error("Error updating step progress:",r),r}}async getOperatorWorkEntries(e,t,o){try{const r=new Date(o,parseInt(t)-1,1),s=new Date(o,parseInt(t),0,23,59,59),d=g(h(l,"operatorWorkEntries"),u("operatorId","==",e),u("workDate",">=",r),u("workDate","<=",s),M("workDate","desc"));return(await T(d)).docs.map(i=>({id:i.id,...i.data()}))}catch(r){throw console.error("Error getting operator work entries:",r),r}}async calculateMonthlyWages(e,t){try{const o=new Date(t,parseInt(e)-1,1),r=new Date(t,parseInt(e),0,23,59,59),s=g(h(l,"operatorWorkEntries"),u("workDate",">=",o),u("workDate","<=",r)),i=(await T(s)).docs.map(p=>({id:p.id,...p.data()})).reduce((p,c)=>(p[c.operatorId]||(p[c.operatorId]=[]),p[c.operatorId].push(c),p),{}),w=[];for(const[p,c]of Object.entries(i)){const f=c.reduce((S,P)=>S+P.completedPieces,0),n=c.reduce((S,P)=>S+P.totalPrice,0),m=c.reduce((S,P)=>P.startTime&&P.endTime?S+(P.endTime.toDate().getTime()-P.startTime.toDate().getTime())/(1e3*60*60):S,0),k=c[0]?.operatorName||"Unknown",v=m>0?f/m:0;w.push({operatorId:p,operatorName:k,month:e,year:t,workEntries:c,totalPieces:f,totalEarnings:n,totalHours:m,efficiency:v,bonuses:0,deductions:0,finalWage:n})}return w}catch(o){throw console.error("Error calculating monthly wages:",o),o}}subscribeToProductionStats(e){return q(h(l,"productionLots"),t=>{const o=t.docs.map(s=>({id:s.id,...s.data()})),r={totalLots:o.length,activeLots:o.filter(s=>s.status==="in_progress").length,completedLots:o.filter(s=>s.status==="completed").length,totalPieces:o.reduce((s,d)=>s+d.totalPieces,0),completedPieces:o.reduce((s,d)=>s+d.processSteps.reduce((a,i)=>a+i.completedPieces,0),0)};e(r)})}getProcessTemplates(){return b}}const O=new D;export{O as p};
