import{j as a}from"./query-vendor.DpsghfSz.js";import{r as f}from"./react-vendor.CfKEcsXX.js";import{f as D,B as x,C as b,c as v,d as I,b as C,a as O}from"./index.B3OoR7j1.js";import{N as M}from"./notification-service.BcdBUkr2.js";import{t as p}from"./index.LBReXyrD.js";import{k as S,o as j,Z as F,N as R,s as H,U as E,q as V,H as z}from"./ui-vendor.D5U9TC-3.js";import"./firebase-vendor.D8xw0AXf.js";import"./utils-vendor.B0NEtgzl.js";class U{notificationService;config;subscribers=new Map;constructor(){this.notificationService=new M,this.config={enableSound:!0,enableVibration:!0,language:"en"},this.initializePushNotifications()}async initializePushNotifications(){if("Notification"in window&&Notification.permission==="default"&&await Notification.requestPermission(),"serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/sw.js");console.log("Service Worker registered:",e)}catch(e){console.error("Service Worker registration failed:",e)}}async sendWorkAssignmentNotification(e){const t=this.getLocalizedMessages(e),i={recipientId:e.operatorId,recipientType:"operator",type:"work_assignment",title:t.title,message:t.message,priority:e.priority,channels:["push","in_app"],actionRequired:!0,read:!1,metadata:{workBundleId:e.workBundleId,workItemId:e.workItemId,assignmentType:e.assignmentType,fromOperatorId:e.fromOperatorId,machineType:e.machineType,operation:e.operation,estimatedTime:e.estimatedTime},actionUrl:`/operator/work-dashboard/${e.workBundleId}`,actions:[{id:"accept",title:t.acceptButton,type:"primary",url:`/operator/work-dashboard/${e.workBundleId}?action=accept`},{id:"view_details",title:t.viewButton,type:"secondary",url:`/operator/work-dashboard/${e.workBundleId}`}]};(await this.notificationService.create(i)).success&&(await this.showBrowserNotification(t.title,t.message,e),this.showInAppNotification(t.title,t.message,e.priority),this.notifySubscribers(e.operatorId,{type:"work_assignment",data:i,priority:e.priority}))}async sendSequentialOperationNotification(e){const t=this.getSequentialMessages(e);for(const i of e.operatorIds){const r={recipientId:i,recipientType:"operator",type:"work_assignment",title:t.title,message:t.message,priority:e.priority,channels:["push","in_app"],actionRequired:!0,read:!1,metadata:{workBundleId:e.workBundleId,workItemId:e.workItemId,assignmentType:"sequential_ready",fromOperatorId:e.previousOperatorId,fromOperatorName:e.previousOperatorName,machineType:e.machineType,operation:e.operation,completedOperation:e.completedOperation,isSequential:!0},actionUrl:`/operator/work-dashboard/${e.workBundleId}`,actions:[{id:"take_work",title:t.takeButton,type:"primary",url:`/operator/work-dashboard/${e.workBundleId}?action=take`},{id:"view_details",title:t.viewButton,type:"secondary",url:`/operator/work-dashboard/${e.workBundleId}`}]};await this.notificationService.create(r),await this.showBrowserNotification(t.title,t.message,{operatorId:i,workBundleId:e.workBundleId,assignmentType:"sequential_ready",priority:e.priority}),this.showInAppNotification(t.title,t.message,e.priority)}}getLocalizedMessages(e){const t=this.config.language==="ne";switch(e.assignmentType){case"new_assignment":return{title:t?"नयाँ काम तोकिएको छ":"New Work Assigned",message:t?`${e.operation||"काम"} को लागि नयाँ काम तोकिएको छ। मेसिन: ${e.machineType||"N/A"}`:`New work assigned for ${e.operation||"operation"}. Machine: ${e.machineType||"N/A"}`,acceptButton:t?"स्वीकार गर्नुहोस्":"Accept",viewButton:t?"विवरण हेर्नुहोस्":"View Details"};case"sequential_ready":return{title:t?"अर्को काम तयार छ":"Next Operation Ready",message:t?"अघिल्लो अपरेटरले काम सकाएको छ। तपाईंको पालो आयो।":"Previous operator completed their work. Your turn is ready.",acceptButton:t?"काम लिनुहोस्":"Take Work",viewButton:t?"विवरण हेर्नुहोस्":"View Details"};case"quality_issue":return{title:t?"गुणस्तर समस्या":"Quality Issue",message:t?"तपाईंको कामको गुणस्तरमा समस्या देखिएको छ।":"A quality issue has been identified with your work.",acceptButton:t?"सुधार गर्नुहोस्":"Fix Issue",viewButton:t?"विवरण हेर्नुहोस्":"View Details"};default:return{title:t?"सूचना":"Notification",message:t?"नयाँ सूचना आएको छ।":"You have a new notification.",acceptButton:t?"हेर्नुहोस्":"View",viewButton:t?"विवरण":"Details"}}}getSequentialMessages(e){const t=this.config.language==="ne";return{title:t?"अर्को काम तयार छ":"Work Available - Next Operation",message:t?`${e.previousOperatorName} ले ${e.completedOperation} सकाएको छ। अब ${e.operation} को लागि काम तयार छ।`:`${e.previousOperatorName} completed ${e.completedOperation}. Work is now ready for ${e.operation}.`,takeButton:t?"काम लिनुहोस्":"Take Work",viewButton:t?"विवरण हेर्नुहोस्":"View Details"}}async showBrowserNotification(e,t,i){if("Notification"in window&&Notification.permission==="granted"){const r=new Notification(e,{body:t,icon:"/icons/work-assignment.png",badge:"/icons/badge.png",tag:`work-${i.workBundleId}`,requireInteraction:i.priority==="urgent",silent:!this.config.enableSound,data:{workBundleId:i.workBundleId,operatorId:i.operatorId,url:`/operator/work-dashboard/${i.workBundleId}`}});if(r.onclick=()=>{window.focus(),window.location.href=r.data.url,r.close()},i.priority!=="urgent"&&setTimeout(()=>r.close(),1e4),this.config.enableVibration&&"vibrate"in navigator){const s=i.priority==="urgent"?[200,100,200]:[100,50,100];navigator.vibrate(s)}}}showInAppNotification(e,t,i){const r=i==="urgent"?1e4:5e3;i==="urgent"?p.error(e,{description:t,duration:r,action:{label:"View",onClick:()=>{window.location.href="/operator/work-dashboard"}}}):p.success(e,{description:t,duration:r})}subscribe(e,t){return this.subscribers.set(e,t),()=>{this.subscribers.delete(e)}}notifySubscribers(e,t){const i=this.subscribers.get(e);i&&i(t)}updateConfig(e){this.config={...this.config,...e}}async getUnreadCount(e){const t=await this.notificationService.getUnreadCount(e);return t.success?t.data:0}async markAsRead(e,t){await this.notificationService.markAsRead(e,t)}async getNotificationsForOperator(e,t=!1){return this.notificationService.getNotificationsForUser(e,{unreadOnly:t})}}const y=new U;class L extends D{operatorCapacities=new Map;workflowSteps=new Map;operationDependencies=new Map;constructor(){super("workflow-orchestration"),this.initializeOperationDependencies()}initializeOperationDependencies(){[{operationId:"cutting",operationName:"Cutting",machineType:"cutting_machine",estimatedTimePerPiece:2,requiredSkills:["cutting"],sequenceNumber:1},{operationId:"single_needle_1",operationName:"Single Needle - First Pass",machineType:"single_needle",estimatedTimePerPiece:5,requiredSkills:["single_needle","basic_sewing"],sequenceNumber:2,dependsOn:["cutting"]},{operationId:"overlock",operationName:"Overlock",machineType:"overlock_machine",estimatedTimePerPiece:3,requiredSkills:["overlock"],sequenceNumber:3,dependsOn:["single_needle_1"]},{operationId:"single_needle_2",operationName:"Single Needle - Second Pass",machineType:"single_needle",estimatedTimePerPiece:4,requiredSkills:["single_needle","advanced_sewing"],sequenceNumber:4,dependsOn:["overlock"]},{operationId:"button_hole",operationName:"Button Hole",machineType:"button_hole_machine",estimatedTimePerPiece:2,requiredSkills:["button_hole"],sequenceNumber:5,dependsOn:["single_needle_2"]},{operationId:"finishing",operationName:"Finishing",machineType:"manual",estimatedTimePerPiece:3,requiredSkills:["finishing","quality_check"],sequenceNumber:6,dependsOn:["button_hole"]}].forEach(t=>{this.operationDependencies.set(t.operationId,t)})}async updateOperatorCapacity(e,t){const i=this.operatorCapacities.get(e);i&&(i.currentWorkload=t,i.availableCapacity=Math.max(0,100-t/i.maxCapacityPerHour*100),this.operatorCapacities.set(e,i),await this.checkForAvailableWork(e))}async loadOperatorCapacities(){try{(await this.getOperatorsWithCapacity()).forEach(t=>{this.operatorCapacities.set(t.operatorId,t)})}catch(e){console.error("Error loading operator capacities:",e)}}areAllDependenciesCompleted(e){const t=this.workflowSteps.get(e);return!t||t.dependencies.length===0?!0:t.dependencies.every(i=>this.workflowSteps.get(i)?.status==="completed")}findQualifiedOperators(e,t,i=80){const r=[];for(const[s,n]of this.operatorCapacities)n.machineType===e&&n.isActive&&!n.isOnBreak&&n.availableCapacity>=100-i&&t.every(c=>n.skills.includes(c))&&r.push(n);return r.sort((s,n)=>n.availableCapacity-s.availableCapacity)}async completeOperation(e,t,i){const r=this.workflowSteps.get(e);if(!r)throw new Error(`Workflow step ${e} not found`);r.status="completed",r.completedOperatorId=t,r.completedPieces=i,r.actualCompletionTime=new Date,this.workflowSteps.set(e,r);const s=this.operatorCapacities.get(t);s&&(s.currentWorkload=Math.max(0,s.currentWorkload-i),await this.updateOperatorCapacity(t,s.currentWorkload)),await this.activateDependentOperations(r),await this.logActivity("operation_completed",e,{operationName:r.operationName,operatorId:t,piecesCompleted:i,workBundleId:r.workBundleId})}async activateDependentOperations(e){const t=Array.from(this.workflowSteps.values()).filter(i=>i.dependencies.includes(e.stepId)&&i.status==="pending");for(const i of t)if(this.areAllDependenciesCompleted(i.stepId)){i.status="ready",this.workflowSteps.set(i.stepId,i);const r=this.operationDependencies.get(i.operationId);if(!r)continue;const s=this.findQualifiedOperators(r.machineType,r.requiredSkills,80);if(s.length>0){const n=this.operatorCapacities.get(e.completedOperatorId);await y.sendSequentialOperationNotification({operatorIds:s.map(c=>c.operatorId),workBundleId:i.workBundleId,workItemId:i.workItemId||"",previousOperatorId:e.completedOperatorId,previousOperatorName:n?.operatorName||"Previous Operator",machineType:r.machineType,operation:r.operationName,completedOperation:e.operationName,priority:i.priority}),console.log(`🔔 Sequential notification sent to ${s.length} operators for ${r.operationName}`)}}}async assignWorkToOperator(e){const t=this.findQualifiedOperators(e.requiredMachineType,e.requiredSkills,e.maxCapacityThreshold);if(t.length===0)return{success:!1,message:`No qualified operators available for ${e.requiredMachineType}. All operators may be at capacity.`};let i=t[0];return e.priority==="urgent"&&(i=t.sort((r,s)=>s.availableCapacity-r.availableCapacity)[0]),i.currentWorkload+=e.pieces,i.availableCapacity=Math.max(0,100-i.currentWorkload/i.maxCapacityPerHour*100),this.operatorCapacities.set(i.operatorId,i),await y.sendWorkAssignmentNotification({operatorId:i.operatorId,workBundleId:e.workBundleId,assignmentType:"new_assignment",priority:e.priority,machineType:e.requiredMachineType,operation:this.operationDependencies.get(e.operationId)?.operationName||"Operation",estimatedTime:e.pieces*e.estimatedTimePerPiece}),{success:!0,assignedOperatorId:i.operatorId,message:`Work assigned to ${i.operatorName}. Current capacity: ${i.availableCapacity.toFixed(1)}%`}}async checkForAvailableWork(e){const t=this.operatorCapacities.get(e);if(!t||t.availableCapacity<20)return;const i=Array.from(this.workflowSteps.values()).filter(r=>{if(r.status!=="ready"||r.assignedOperatorId)return!1;const s=this.operationDependencies.get(r.operationId);return s&&s.machineType===t.machineType&&s.requiredSkills.every(n=>t.skills.includes(n))}).sort((r,s)=>{const n={urgent:4,high:3,normal:2,low:1};return n[s.priority]-n[r.priority]});if(i.length>0){const r=i[0],s=this.operationDependencies.get(r.operationId);await y.sendWorkAssignmentNotification({operatorId:t.operatorId,workBundleId:r.workBundleId,workItemId:r.workItemId,assignmentType:"sequential_ready",priority:r.priority,machineType:t.machineType,operation:s?.operationName||"Operation"})}}async createWorkflowForBundle(e,t,i){const r=[];for(let s=0;s<t.length;s++){const n=t[s],c=this.operationDependencies.get(n);if(!c)continue;const h=`${e}-${n}-${Date.now()}`,u=s===0?[]:[`${e}-${t[s-1]}-${Date.now()}`],w={stepId:h,workBundleId:e,operationId:n,operationName:c.operationName,status:s===0?"ready":"pending",pieces:i,completedPieces:0,dependencies:u,qualityCheckRequired:c.operationName.includes("Finishing"),priority:"normal"};r.push(w),this.workflowSteps.set(h,w)}if(r.length>0&&r[0].status==="ready"){const s=r[0],n=this.operationDependencies.get(s.operationId);n&&await this.assignWorkToOperator({workBundleId:e,operationId:s.operationId,pieces:i,priority:"normal",requiredMachineType:n.machineType,requiredSkills:n.requiredSkills,estimatedTimePerPiece:n.estimatedTimePerPiece,maxCapacityThreshold:80})}}async getOperatorsWithCapacity(){return[{operatorId:"op1",operatorName:"राम श्रेष्ठ",machineType:"single_needle",maxCapacityPerHour:60,currentWorkload:30,availableCapacity:50,skills:["single_needle","basic_sewing","advanced_sewing"],currentShift:"morning",isOnBreak:!1,isActive:!0},{operatorId:"op2",operatorName:"सीता तामाङ",machineType:"overlock_machine",maxCapacityPerHour:80,currentWorkload:20,availableCapacity:75,skills:["overlock"],currentShift:"morning",isOnBreak:!1,isActive:!0}]}getWorkflowStatus(e){return Array.from(this.workflowSteps.values()).filter(t=>t.workBundleId===e).sort((t,i)=>{const r=this.operationDependencies.get(t.operationId),s=this.operationDependencies.get(i.operationId);return(r?.sequenceNumber||0)-(s?.sequenceNumber||0)})}getOperatorWorkload(e){const t=this.operatorCapacities.get(e)||null,i=Array.from(this.workflowSteps.values()).filter(s=>s.assignedOperatorId===e&&s.status==="in_progress"),r=Array.from(this.workflowSteps.values()).filter(s=>{if(s.status!=="ready"||s.assignedOperatorId)return!1;const n=this.operationDependencies.get(s.operationId);return n&&t&&n.machineType===t.machineType&&n.requiredSkills.every(c=>t.skills.includes(c))});return{capacity:t,assignedWork:i,pendingWork:r}}}const _=new L,te=()=>{const[d,e]=f.useState(!1),[t,i]=f.useState(0),[r,s]=f.useState([]),[n,c]=f.useState([]),h=[{name:"Create Work Bundle",operation:"cutting",machine:"cutting_machine"},{name:"Cutting Complete",operation:"single_needle_1",machine:"single_needle"},{name:"First Sewing Complete",operation:"overlock",machine:"overlock_machine"},{name:"Overlock Complete",operation:"single_needle_2",machine:"single_needle"},{name:"Second Sewing Complete",operation:"finishing",machine:"manual"}],u=[{operatorId:"op1",operatorName:"राम श्रेष्ठ (Ram Shrestha)",machineType:"single_needle",currentCapacity:45,availableCapacity:55,skills:["single_needle","basic_sewing"]},{operatorId:"op2",operatorName:"सीता तामाङ (Sita Tamang)",machineType:"overlock_machine",currentCapacity:25,availableCapacity:75,skills:["overlock"]},{operatorId:"op3",operatorName:"हरि गुरुङ (Hari Gurung)",machineType:"single_needle",currentCapacity:70,availableCapacity:30,skills:["single_needle","advanced_sewing"]}];f.useEffect(()=>{c(u),w()},[]);const w=()=>{s([{stepId:"1",operationName:"Cutting",status:"completed",assignedTo:"op1"},{stepId:"2",operationName:"Single Needle 1",status:"ready",assignedTo:null},{stepId:"3",operationName:"Overlock",status:"pending",assignedTo:null},{stepId:"4",operationName:"Single Needle 2",status:"pending",assignedTo:null},{stepId:"5",operationName:"Finishing",status:"pending",assignedTo:null}])},q=o=>{switch(o){case"completed":return"bg-green-100 text-green-800";case"in_progress":return"bg-blue-100 text-blue-800";case"ready":return"bg-yellow-100 text-yellow-800";case"pending":return"bg-gray-100 text-gray-800";default:return"bg-gray-100 text-gray-800"}},W=o=>{switch(o){case"completed":return a.jsx(z,{className:"w-4 h-4 text-green-600"});case"in_progress":return a.jsx(j,{className:"w-4 h-4 text-blue-600"});case"ready":return a.jsx(S,{className:"w-4 h-4 text-yellow-600"});case"pending":return a.jsx(V,{className:"w-4 h-4 text-gray-400"});default:return a.jsx(S,{className:"w-4 h-4"})}},B=o=>o<=50?"bg-green-100 text-green-800":o<=80?"bg-yellow-100 text-yellow-800":"bg-red-100 text-red-800",$=async()=>{if(!d){e(!0),i(0);try{await _.createWorkflowForBundle("demo-bundle-001",["cutting","single_needle_1","overlock","single_needle_2","finishing"],50),p.success("🎯 Work bundle created!",{description:"Workflow orchestration started for 50 pieces"});for(let o=0;o<h.length-1;o++){i(o),await new Promise(m=>setTimeout(m,2e3));const l=`demo-bundle-001-${h[o].operation}`;await _.completeOperation(l,"op1",50);const g=h[o+1],k=u.filter(m=>m.machineType===g.machine&&m.availableCapacity>20);k.length>0&&(p.success("🔔 Sequential notification sent!",{description:`${k.length} ${g.machine} operators notified about available work`,duration:3e3}),await y.sendSequentialOperationNotification({operatorIds:k.map(m=>m.operatorId),workBundleId:"demo-bundle-001",workItemId:l,previousOperatorId:"op1",previousOperatorName:"राम श्रेष्ठ",machineType:g.machine,operation:g.name,completedOperation:h[o].name,priority:"normal"})),s(m=>m.map((N,T)=>T===o+1?{...N,status:"ready",assignedTo:null}:T===o?{...N,status:"completed",assignedTo:"op1"}:N))}p.success("✅ Workflow simulation complete!",{description:"All sequential notifications were sent successfully"})}catch(o){console.error("Workflow simulation error:",o),p.error("❌ Workflow simulation failed")}finally{e(!1)}}},A=()=>{const o=u.find(l=>l.operatorId==="op3");if(o){const l=Math.max(0,o.currentCapacity-30);o.currentCapacity=l,o.availableCapacity=100-l,c([...u]),p.success("📊 Capacity updated!",{description:`${o.operatorName} now has ${o.availableCapacity}% available capacity`}),o.availableCapacity>50&&p.info("🎯 Work assignment triggered!",{description:"Operator has capacity for new work - checking queue..."})}},P=async()=>{const o=u[0];await y.sendWorkAssignmentNotification({operatorId:o.operatorId,workBundleId:"direct-assignment-001",assignmentType:"new_assignment",priority:"high",machineType:o.machineType,operation:"Single Needle Hemming",estimatedTime:45}),p.success("📲 Direct assignment notification sent!",{description:`Push notification sent to ${o.operatorName}`})};return a.jsxs("div",{className:"p-6 space-y-6 max-w-6xl mx-auto",children:[a.jsxs("div",{className:"text-center",children:[a.jsx("h1",{className:"text-3xl font-bold text-gray-900 mb-2",children:"Sequential Workflow Notification Demo"}),a.jsx("p",{className:"text-gray-600 mb-6",children:"Demonstrates automatic notifications when operations complete and work becomes available"}),a.jsxs("div",{className:"flex gap-4 justify-center mb-8",children:[a.jsx(x,{onClick:$,disabled:d,leftIcon:d?a.jsx(S,{className:"w-4 h-4 animate-spin"}):a.jsx(j,{className:"w-4 h-4"}),size:"lg",children:d?"Running Workflow...":"Start Workflow Demo"}),a.jsx(x,{variant:"outline",onClick:A,leftIcon:a.jsx(F,{className:"w-4 h-4"}),children:"Test Capacity Check"}),a.jsx(x,{variant:"outline",onClick:P,leftIcon:a.jsx(R,{className:"w-4 h-4"}),children:"Test Direct Assignment"})]})]}),a.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-6",children:[a.jsxs(b,{children:[a.jsx(v,{children:a.jsxs(I,{className:"flex items-center gap-2",children:[a.jsx(H,{className:"w-5 h-5"}),"Workflow Progress"]})}),a.jsx(C,{children:a.jsx("div",{className:"space-y-4",children:r.map((o,l)=>a.jsxs("div",{className:`flex items-center gap-3 p-3 rounded-lg border ${l===t&&d?"border-blue-200 bg-blue-50":"border-gray-200"}`,children:[W(o.status),a.jsxs("div",{className:"flex-1",children:[a.jsxs("div",{className:"flex items-center justify-between",children:[a.jsx("span",{className:"font-medium text-gray-900",children:o.operationName}),a.jsx(O,{className:q(o.status),children:o.status.replace("_"," ")})]}),o.assignedTo&&a.jsxs("p",{className:"text-sm text-gray-500 mt-1",children:["Assigned to: ",u.find(g=>g.operatorId===o.assignedTo)?.operatorName]})]}),l===t&&d&&a.jsx("div",{className:"w-2 h-2 bg-blue-500 rounded-full animate-pulse"})]},o.stepId))})})]}),a.jsxs(b,{children:[a.jsx(v,{children:a.jsxs(I,{className:"flex items-center gap-2",children:[a.jsx(E,{className:"w-5 h-5"}),"Operator Capacities"]})}),a.jsx(C,{children:a.jsx("div",{className:"space-y-4",children:n.map(o=>a.jsxs("div",{className:"p-4 border border-gray-200 rounded-lg",children:[a.jsxs("div",{className:"flex items-center justify-between mb-3",children:[a.jsxs("div",{children:[a.jsx("h4",{className:"font-medium text-gray-900",children:o.operatorName}),a.jsxs("p",{className:"text-sm text-gray-500",children:["Machine: ",o.machineType.replace("_"," ")]})]}),a.jsxs(O,{className:B(o.currentCapacity),children:[o.availableCapacity,"% available"]})]}),a.jsx("div",{className:"w-full bg-gray-200 rounded-full h-2 mb-2",children:a.jsx("div",{className:`h-2 rounded-full transition-all duration-300 ${o.currentCapacity<=50?"bg-green-500":o.currentCapacity<=80?"bg-yellow-500":"bg-red-500"}`,style:{width:`${o.currentCapacity}%`}})}),a.jsxs("div",{className:"flex justify-between text-xs text-gray-500",children:[a.jsxs("span",{children:["Current: ",o.currentCapacity,"%"]}),a.jsx("span",{children:o.availableCapacity>50?"✅ Can take more work":o.availableCapacity>20?"⚠️ Limited capacity":"🚫 At capacity"})]}),a.jsx("div",{className:"mt-2",children:a.jsxs("p",{className:"text-xs text-gray-500",children:["Skills: ",o.skills.join(", ")]})})]},o.operatorId))})})]})]}),a.jsxs(b,{children:[a.jsx(v,{children:a.jsx(I,{children:"🔧 How Sequential Workflow Works"})}),a.jsx(C,{children:a.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6",children:[a.jsxs("div",{children:[a.jsx("h4",{className:"font-semibold text-gray-900 mb-2",children:"1. Operation Completion Detection"}),a.jsx("p",{className:"text-sm text-gray-600 mb-4",children:'When Op1 (single needle) finishes their work, the system automatically detects completion and marks the next operation as "ready".'}),a.jsx("h4",{className:"font-semibold text-gray-900 mb-2",children:"2. Smart Operator Matching"}),a.jsx("p",{className:"text-sm text-gray-600",children:"System finds operators with matching machine type (single needle) and required skills, considering their current workload capacity."})]}),a.jsxs("div",{children:[a.jsx("h4",{className:"font-semibold text-gray-900 mb-2",children:"3. Intelligent Notifications"}),a.jsx("p",{className:"text-sm text-gray-600 mb-4",children:"Only operators with less than 80% capacity receive notifications, ensuring work distribution efficiency."}),a.jsx("h4",{className:"font-semibold text-gray-900 mb-2",children:"4. Multi-Language Support"}),a.jsx("p",{className:"text-sm text-gray-600",children:"Notifications are sent in operator's preferred language (English/Nepali) with clear work handoff information."})]})]})})]})]})};export{te as default};
