class o{static ACCESS_TOKEN_KEY="tsa_access_token";static REFRESH_TOKEN_KEY="tsa_refresh_token";static TOKEN_SECRET="tsa_erp_secret_key_2024";static ACCESS_TOKEN_EXPIRY=1440*60*1e3;static REFRESH_TOKEN_EXPIRY=720*60*60*1e3;static generateAccessToken(e){const t={userId:e.id,username:e.username,role:e.role,permissions:e.permissions,iat:Date.now(),exp:Date.now()+this.ACCESS_TOKEN_EXPIRY},s={header:{alg:"HS256",typ:"JWT"},payload:t,signature:this.generateSignature(t)};return btoa(JSON.stringify(s))}static generateRefreshToken(e){const t={userId:e,iat:Date.now(),exp:Date.now()+this.REFRESH_TOKEN_EXPIRY},s={payload:t,signature:this.generateSignature(t)};return btoa(JSON.stringify(s))}static generateSignature(e){const t=JSON.stringify(e)+this.TOKEN_SECRET;let s=0;for(let r=0;r<t.length;r++){const a=t.charCodeAt(r);s=(s<<5)-s+a,s=s&s}return s.toString(36)}static storeTokens(e,t){localStorage.setItem(this.ACCESS_TOKEN_KEY,e),localStorage.setItem(this.REFRESH_TOKEN_KEY,t)}static getAccessToken(){return localStorage.getItem(this.ACCESS_TOKEN_KEY)}static getRefreshToken(){return localStorage.getItem(this.REFRESH_TOKEN_KEY)}static validateAccessToken(e){try{const t=JSON.parse(atob(e)),s=t.payload,r=this.generateSignature(s);return t.signature!==r?{valid:!1}:s.exp<Date.now()?{valid:!1,expired:!0,payload:s}:{valid:!0,payload:s}}catch{return{valid:!1}}}static validateRefreshToken(e){try{const t=JSON.parse(atob(e)),s=t.payload,r=this.generateSignature(s);return t.signature!==r?{valid:!1}:s.exp<Date.now()?{valid:!1,expired:!0,payload:s}:{valid:!0,payload:s}}catch{return{valid:!1}}}static async refreshAccessToken(){try{const e=this.getRefreshToken();if(!e)return{success:!1,error:"No refresh token found"};const t=this.validateRefreshToken(e);if(!t.valid)return this.clearTokens(),{success:!1,error:t.expired?"Refresh token expired":"Invalid refresh token"};const s=t.payload.userId,r=this.getUserDataFromStorage(s);if(!r)return{success:!1,error:"User data not found"};const a=this.generateAccessToken(r);return localStorage.setItem(this.ACCESS_TOKEN_KEY,a),{success:!0,accessToken:a}}catch{return{success:!1,error:"Token refresh failed"}}}static getUserFromToken(){const e=this.getAccessToken();if(!e)return null;const t=this.validateAccessToken(e);if(!t.valid||!t.payload)return null;const s=t.payload;return{id:s.userId,username:s.username,name:s.username,role:s.role,permissions:s.permissions,active:!0,createdAt:new Date}}static isTokenExpiringSoon(e,t=10){const s=this.validateAccessToken(e);return!s.valid||!s.payload?!0:(s.payload.exp-Date.now())/(1e3*60)<=t}static clearTokens(){localStorage.removeItem(this.ACCESS_TOKEN_KEY),localStorage.removeItem(this.REFRESH_TOKEN_KEY)}static getSessionExpiry(){const e=this.getAccessToken();return e&&this.validateAccessToken(e).payload?.exp||null}static getUserDataFromStorage(e){try{const t=localStorage.getItem(`user_${e}`);return t?JSON.parse(t):null}catch{return null}}static storeUserData(e){localStorage.setItem(`user_${e.id}`,JSON.stringify(e))}static initializeTokens(e){const t=this.generateAccessToken(e),s=this.generateRefreshToken(e.id);return this.storeTokens(t,s),this.storeUserData(e),{accessToken:t,refreshToken:s}}static async autoRefreshToken(){const e=this.getAccessToken();return e?this.isTokenExpiringSoon(e,10)?(await this.refreshAccessToken()).success:!0:!1}}export{o as TokenService};
