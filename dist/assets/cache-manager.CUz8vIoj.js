class t{static CACHE_VERSION_KEY="tsa_cache_version";static CURRENT_VERSION=Date.now().toString();static forceReload(){localStorage.clear(),sessionStorage.clear(),localStorage.setItem(this.CACHE_VERSION_KEY,this.CURRENT_VERSION),"serviceWorker"in navigator&&navigator.serviceWorker.getRegistrations().then(e=>{e.forEach(a=>a.unregister())}),window.location.reload()}static shouldReload(){const e=localStorage.getItem(this.CACHE_VERSION_KEY);return!e||e!==this.CURRENT_VERSION}static clearCache(e){localStorage.removeItem(e),sessionStorage.removeItem(e)}static addCacheBuster(e){const a=e.includes("?")?"&":"?";return`${e}${a}_cb=${Date.now()}`}static async clearBrowserCache(){try{if("caches"in window){const e=await caches.keys();await Promise.all(e.map(a=>caches.delete(a)))}}catch(e){console.warn("Could not clear browser cache:",e)}}static showReloadPrompt(){confirm("A new version of the app is available. Click OK to reload and get the latest updates.")&&this.forceReload()}static init(){this.shouldReload()&&(console.log("Cache version mismatch detected, updating..."),localStorage.setItem(this.CACHE_VERSION_KEY,this.CURRENT_VERSION)),window.forceReload=this.forceReload.bind(this),window.clearCache=this.clearBrowserCache.bind(this)}}t.init();export{t as CacheManager,t as default};
