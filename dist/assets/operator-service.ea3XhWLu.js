const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/id-generation-service.zIwPYme0.js","assets/index.B__xpDQO.js","assets/query-vendor.NFs8Lf8Y.js","assets/react-vendor.BcnQP8kQ.js","assets/ui-vendor.BnTQXQPs.js","assets/utils-vendor.B0NEtgzl.js","assets/firebase-vendor.m6WcKfT_.js","assets/index.B7mSI82B.css"])))=>i.map(i=>d[i]);
import{Z as d,af as u,ab as f,a8 as A,Y as S,ai as v,aj as R}from"./firebase-vendor.m6WcKfT_.js";import{k as T,C as m,_,d as p,r as o,a as c,R as n,s as y,e as h,o as O,A as k}from"./index.B__xpDQO.js";const L=[{machineType:"overlock",displayName:"Overlock",nepaliName:"ओभरलक",category:"stitching",skillRequired:"intermediate",compatibleWith:["overlock","OVERLOCK"]},{machineType:"flatlock",displayName:"Flatlock",nepaliName:"फ्ल्यालक",category:"stitching",skillRequired:"intermediate",compatibleWith:["flatlock","FLATLOCK"]},{machineType:"singleNeedle",displayName:"Single Needle",nepaliName:"एकल सुई",category:"stitching",skillRequired:"beginner",compatibleWith:["singleNeedle","single_needle","Single Needle"]},{machineType:"doubleNeedle",displayName:"Double Needle",nepaliName:"दुईवटा सुई",category:"stitching",skillRequired:"intermediate",compatibleWith:["doubleNeedle","double_needle","Double Needle"]},{machineType:"kansai",displayName:"Kansai",nepaliName:"कान्साई",category:"stitching",skillRequired:"advanced",compatibleWith:["kansai","KANSAI","Kansai"]},{machineType:"buttonhole",displayName:"Buttonhole",nepaliName:"बटनहोल",category:"finishing",skillRequired:"advanced",compatibleWith:["buttonhole","Buttonhole","BUTTONHOLE"]},{machineType:"buttonAttach",displayName:"Button Attach",nepaliName:"बटन जोड्ने",category:"finishing",skillRequired:"intermediate",compatibleWith:["buttonAttach","button_attach"]},{machineType:"iron",displayName:"Iron/Press",nepaliName:"इस्त्री प्रेस",category:"pressing",skillRequired:"beginner",compatibleWith:["iron","pressing"]},{machineType:"cutting",displayName:"Cutting Machine",nepaliName:"काट्ने मेसिन",category:"cutting",skillRequired:"advanced",compatibleWith:["cutting"]},{machineType:"manual",displayName:"Manual Work",nepaliName:"हस्तकला काम",category:"manual",skillRequired:"beginner",compatibleWith:["manual"]}],W=[{value:"beginner",label:"Beginner",nepaliLabel:"शुरुवाती",experienceMonths:0},{value:"intermediate",label:"Intermediate",nepaliLabel:"मध्यम",experienceMonths:6},{value:"advanced",label:"Advanced",nepaliLabel:"उन्नत",experienceMonths:18},{value:"expert",label:"Expert",nepaliLabel:"विशेषज्ञ",experienceMonths:36}],F={working:{color:"green",label:"Working",nepaliLabel:"काम गर्दै",icon:"⚡"},break:{color:"yellow",label:"On Break",nepaliLabel:"विश्राममा",icon:"☕"},offline:{color:"gray",label:"Offline",nepaliLabel:"अफलाइन",icon:"⭕"},idle:{color:"blue",label:"Available",nepaliLabel:"उपलब्ध",icon:"✅"}};class b extends T{constructor(){super(m.OPERATORS)}async createOperator(r){try{const e=this.validateOperatorData(r);if(!e.isValid)return{success:!1,error:e.errors.join(", "),code:"VALIDATION_ERROR"};let t=r.employeeId;if(!t){const{IDGenerationService:E}=await _(async()=>{const{IDGenerationService:g}=await import("./id-generation-service.zIwPYme0.js");return{IDGenerationService:g}},__vite__mapDeps([0,1,2,3,4,5,6,7]));t=await E.generateEmployeeId()}const a=await this.checkDuplicates(r.username,t);if(!a.isValid)return{success:!1,error:a.error,code:"DUPLICATE_ERROR"};const i={...Object.fromEntries(Object.entries(r).filter(([E,g])=>g!==void 0)),employeeId:t,email:r.email||"",phone:r.phone||"",address:r.address||"",role:"operator",averageEfficiency:0,qualityScore:0,completedBundles:0,totalPieces:0,totalEarnings:0,isActive:!0,availabilityStatus:"available",currentAssignments:[],maxConcurrentWork:r.maxConcurrentWork||3,createdAt:d.now(),updatedAt:d.now()},l=await this.create(i);return l.success&&l.data&&(await this.initializeOperatorStatus(l.data.id,r.primaryMachine),await this.logActivity(l.data.id,"operator_created","Operator account created")),l}catch(e){return console.error("Error creating operator:",e),{success:!1,error:e instanceof Error?e.message:"Failed to create operator",code:"CREATION_FAILED"}}}async getOperatorWithStatus(r){try{const e=await this.getById(r);if(!e.success||!e.data)return e;const t=await this.getOperatorRealtimeStatus(r);return{success:!0,data:{...e.data,realtimeStatus:t}}}catch(e){return console.error("Error getting operator with status:",e),{success:!1,error:e instanceof Error?e.message:"Failed to get operator",code:"FETCH_FAILED"}}}async getOperatorsSummary(){try{const r=await this.getAll();return!r.success||!r.data?r:{success:!0,data:await Promise.all(r.data.map(async t=>{const a=await this.getOperatorRealtimeStatus(t.id);return{id:t.id,name:t.name,employeeId:t.employeeId,primaryMachine:t.primaryMachine,currentStatus:a.status,efficiency:t.averageEfficiency,qualityScore:t.qualityScore,currentWork:a.currentWork,avatar:t.avatar}}))}}catch(r){return console.error("Error getting operators summary:",r),{success:!1,error:r instanceof Error?r.message:"Failed to get operators",code:"FETCH_FAILED"}}}async updateOperator(r,e){try{if(e.username||e.employeeId){const a=await this.checkDuplicates(e.username,e.employeeId,r);if(!a.isValid)return{success:!1,error:a.error,code:"DUPLICATE_ERROR"}}const t=await this.update(r,{...e,updatedAt:d.now()});return t.success&&await this.logActivity(r,"profile_updated",`Profile updated: ${Object.keys(e).join(", ")}`),t}catch(t){return console.error("Error updating operator:",t),{success:!1,error:t instanceof Error?t.message:"Failed to update operator",code:"UPDATE_FAILED"}}}async updateOperatorStats(r,e){try{const t={};e.efficiency!==void 0&&(t.averageEfficiency=e.efficiency),e.qualityScore!==void 0&&(t.qualityScore=e.qualityScore),e.completedPieces!==void 0&&(t.totalPieces=u(e.completedPieces),t.completedBundles=u(1)),e.earnings!==void 0&&(t.totalEarnings=u(e.earnings)),t.updatedAt=f();const a=await this.update(r,t);return a.success&&await this.logActivity(r,"stats_updated",`Statistics updated: ${Object.keys(e).join(", ")}`),a}catch(t){return console.error("Error updating operator stats:",t),{success:!1,error:t instanceof Error?t.message:"Failed to update statistics",code:"STATS_UPDATE_FAILED"}}}async assignWork(r,e){try{const t=await this.getById(r);if(!t.success||!t.data)return{success:!1,error:"Operator not found",code:"OPERATOR_NOT_FOUND"};if(t.data.currentAssignments.length>=t.data.maxConcurrentWork)return{success:!1,error:`Operator at maximum capacity (${t.data.maxConcurrentWork} assignments)`,code:"CAPACITY_EXCEEDED"};const a=A(p),s=S(p,m.OPERATORS,r);a.update(s,{currentAssignments:v(e.bundleId),updatedAt:f()});const i=o(c,`${n.OPERATOR_STATUS}/${r}`);return await y(i,{status:"working",currentWork:e.workItemId,lastActivity:h(),machineStatus:"running"}),await a.commit(),await this.logActivity(r,"work_assigned",`Work assigned: ${e.bundleId} (${e.assignmentMethod})`),{success:!0,message:"Work assigned successfully"}}catch(t){return console.error("Error assigning work:",t),{success:!1,error:t instanceof Error?t.message:"Failed to assign work",code:"ASSIGNMENT_FAILED"}}}async completeWork(r,e){try{const t=A(p),a=S(p,m.OPERATORS,r);t.update(a,{currentAssignments:R(e.bundleId),totalPieces:u(e.completedPieces),completedBundles:u(1),updatedAt:f()});const s=o(c,`${n.OPERATOR_STATUS}/${r}`);return await y(s,{status:"idle",currentWork:null,lastActivity:h(),machineStatus:"stopped"}),await t.commit(),await this.updateOperatorStats(r,{efficiency:e.efficiency,qualityScore:e.qualityScore,completedPieces:e.completedPieces}),await this.logActivity(r,"work_completed",`Work completed: ${e.bundleId}, Pieces: ${e.completedPieces}, Quality: ${e.qualityScore}%`),{success:!0,message:"Work completed successfully"}}catch(t){return console.error("Error completing work:",t),{success:!1,error:t instanceof Error?t.message:"Failed to complete work",code:"COMPLETION_FAILED"}}}async getOperatorsByMachine(r){try{const e={field:"machineTypes",operator:"array-contains",value:r};return await this.getWhere(e,{orderByField:"averageEfficiency",orderDirection:"desc"})}catch(e){return console.error("Error getting operators by machine:",e),{success:!1,error:e instanceof Error?e.message:"Failed to get operators",code:"FETCH_FAILED"}}}async getOperatorsBySkill(r){try{const e={field:"skillLevel",operator:"==",value:r};return await this.getWhere(e,{orderByField:"qualityScore",orderDirection:"desc"})}catch(e){return console.error("Error getting operators by skill:",e),{success:!1,error:e instanceof Error?e.message:"Failed to get operators",code:"FETCH_FAILED"}}}async updateOperatorStatus(r,e){try{const t=o(c,`${n.OPERATOR_STATUS}/${r}`);return await y(t,{...e,lastActivity:h()}),{success:!0,message:"Status updated successfully"}}catch(t){return console.error("Error updating operator status:",t),{success:!1,error:t instanceof Error?t.message:"Failed to update status",code:"STATUS_UPDATE_FAILED"}}}subscribeToOperatorStatus(r,e){const t=o(c,`${n.OPERATOR_STATUS}/${r}`);return O(t,a=>{const s=a.exists()?a.val():null;e(s)},a=>{console.error("Error subscribing to operator status:",a),e(null)}),()=>k(t)}async getOperatorRealtimeStatus(r){return new Promise(e=>{const t=o(c,`${n.OPERATOR_STATUS}/${r}`);O(t,a=>{const s=a.exists()?a.val():{status:"offline",currentWork:null,lastActivity:Date.now(),machineStatus:"stopped"};e(s)},{onlyOnce:!0})})}async initializeOperatorStatus(r,e){const t=o(c,`${n.OPERATOR_STATUS}/${r}`);await y(t,{status:"offline",currentWork:null,lastActivity:h(),machineStatus:"stopped",primaryMachine:e})}validateOperatorData(r){const e=[];return(!r.username||r.username.length<3)&&e.push("Username must be at least 3 characters"),/^[a-zA-Z0-9_]+$/.test(r.username)||e.push("Username can only contain letters, numbers, and underscores"),(!r.name||r.name.length<2)&&e.push("Name must be at least 2 characters"),(!r.employeeId||!/^TSA-EMP-\d{4}$/.test(r.employeeId))&&e.push("Employee ID must follow format: TSA-EMP-XXXX (e.g., TSA-EMP-0001)"),r.email&&!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(r.email)&&e.push("Invalid email format"),r.primaryMachine||e.push("Primary machine is required"),(!r.machineTypes||r.machineTypes.length===0)&&e.push("At least one machine type is required"),r.skillLevel||e.push("Skill level is required"),r.shift||e.push("Shift is required"),{isValid:e.length===0,errors:e}}async checkDuplicates(r,e,t){try{const a=await this.getWhere({field:"username",operator:"==",value:r});if(a.success&&a.data&&a.data.length>0){const i=a.data[0];if(!t||i.id!==t)return{isValid:!1,error:"Username already exists"}}const s=await this.getWhere({field:"employeeId",operator:"==",value:e});if(s.success&&s.data&&s.data.length>0){const i=s.data[0];if(!t||i.id!==t)return{isValid:!1,error:"Employee ID already exists"}}return{isValid:!0}}catch(a){return console.error("Error checking duplicates:",a),{isValid:!1,error:"Validation error"}}}async logActivity(r,e,t,a){try{const s=new T(m.USER_ACTIVITIES),i={operatorId:r,activityType:e,description:t,metadata:a,timestamp:d.now()};await s.create(i)}catch(s){console.error("Error logging activity:",s)}}}const w=new b,C=Object.freeze(Object.defineProperty({__proto__:null,OperatorService:b,operatorService:w},Symbol.toStringTag,{value:"Module"}));export{L as M,W as S,F as a,C as b,w as o};
